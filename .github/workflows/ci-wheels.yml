# Reference:
#   - https://github.com/actions/checkout
#   - https://github.com/actions/download-artifact
#   - https://github.com/actions/upload-artifact
#   - https://github.com/pypa/cibuildwheel
#   - https://github.com/pypa/build
#   - https://github.com/pypa/gh-action-pypi-publish
#   - https://test.pypi.org/help/#apitoken

name: ci-wheels

on:
  pull_request:

  push:
    tags:
      - "v*"
    branches-ignore:
      - "conda-lock-auto-update"
      - "pre-commit-ci-update-config"
      - "dependabot/*"

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_bdist:
    name: "Build ${{ matrix.os }} (${{ matrix.arch }}) wheels"
    # TBD: extend to support windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "macos-13"]
        arch: ["x86_64", "arm64"]
        include:
        - os: ubuntu-latest
          arch: x86_64
          incdir: /usr/include/udunits2
          libdir: /usr/lib64
          xml_path: /usr/share/udunits/udunits2.xml
        - os: macos-13
          arch: x86_64
          incdir: /usr/local/Cellar/udunits/2.2.28/include
          libdir: /usr/local/Cellar/udunits/2.2.28/lib
          xml_path: /usr/local/Cellar/udunits/2.2.28/share/udunits/udunits2-common.xml
        - os: macos-latest
          arch: arm64
          incdir: /opt/homebrew/Cellar/udunits/2.2.28/include
          libdir: /opt/homebrew/Cellar/udunits/2.2.28/lib
          xml_path: /opt/homebrew/Cellar/udunits/2.2.28/share/udunits/udunits2-common.xml
        - os: "windows-latest"
          arch: "AMD64"
          xml_path: "C:/lib/share/udunits/udunits2.xml"
          incdir: C:/lib/include/
          libdir: C:/lib/lib/
        exclude:
        - os: "ubuntu-latest"
          arch: "arm64"
        - os: "macos-latest"
          arch: "x86_64"
        - os: "macos-13"
          arch: "arm64"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Set MACOSX_DEPLOYMENT_TARGET"
      if: startsWith(matrix.os, 'macos')
      run: echo "MACOSX_DEPLOYMENT_TARGET=$([[ ${{ matrix.os }} == 'macos-latest' ]] && echo '14.0' || echo '13.0')" >> $GITHUB_ENV

    - name: Export GitHub Actions cache environment variables
      # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      if: runner.os == 'Windows'
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path')
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          core.exportVariable('VCPKG_ROOT', process.env.VCPKG_INSTALLATION_ROOT);

    - name: "install expat on win32"
      if: runner.os == 'Windows'
      run: vcpkg install expat:x64-windows
      env:
        # cache vcpkg
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    - name: "setup udunits2 on windows"
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -e -u -o -x pipefail

        cd ~/Downloads
        C:/msys64/usr/bin/wget.exe https://downloads.unidata.ucar.edu/udunits/2.2.28/udunits-2.2.28.zip

        unzip udunits-2.2.28.zip

        cd ./udunits-2.2.28/

        cmake -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -B build -S . -D CMAKE_INSTALL_PREFIX=C:/lib/ -D CMAKE_BUILD_TYPE=release
        cmake --build build --config Release
        cmake --install build

    - name: "Building ${{ matrix.os }} (${{ matrix.arch }}) wheels"
      uses: pypa/cibuildwheel@v2.22.0
      env:
        CIBW_SKIP: "cp39-* pp* *-musllinux*"
        CIBW_ARCHS: ${{ matrix.arch }}
        CIBW_BUILD_FRONTEND: build
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BEFORE_BUILD_LINUX: yum install -y udunits2-devel
        CIBW_BEFORE_BUILD_MACOS: brew install udunits
        CIBW_BEFORE_BUILD_WINDOWS: python -m pip install delvewheel
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: >
          python -c 'import cf_units; print(f"cf-units v{cf_units.__version__}")' &&
          python -m pytest --pyargs cf_units
        CIBW_TEST_COMMAND_WINDOWS: python -m pytest --pyargs cf_units
        UDUNITS2_INCDIR: ${{ matrix.incdir }}
        UDUNITS2_LIBDIR: ${{ matrix.libdir }}
        UDUNITS2_XML_PATH: ${{ matrix.xml_path }}
        CIBW_ENVIRONMENT_PASS_LINUX: UDUNITS2_INCDIR UDUNITS2_LIBDIR UDUNITS2_XML_PATH
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
          delvewheel repair -v
          --add-path=C:\\lib\\bin\\
          --add-path=C:\\lib\\lib\\
          --add-path=${{ env.VCPKG_ROOT }}/installed/x64-windows/bin/
          --wheel-dir={dest_dir}
          {wheel}

    - uses: actions/upload-artifact@v4
      with:
        name: pypi-artifacts-bdist-${{ matrix.os }}-${{ matrix.arch }}
        path: ${{ github.workspace }}/wheelhouse/*.whl


  build_sdist:
    name: "Build sdist"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Building sdist"
      shell: bash
      run: |
        pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: pypi-artifacts-sdist
        path: ${{ github.workspace }}/dist/*.tar.gz


  show-artifacts:
    needs: [build_bdist, build_sdist]
    name: "Show artifacts"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/dist
        merge-multiple: true

    - shell: bash
      run: |
        ls -l ${{ github.workspace }}/dist


  publish-artifacts-test-pypi:
    needs: [build_bdist, build_sdist]
    name: "Publish to Test PyPI"
    runs-on: ubuntu-latest
    # upload to Test PyPI for every commit on main branch
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
        print_hash: true


  publish-artifacts-pypi:
    needs: [build_bdist, build_sdist]
    name: "Publish to PyPI"
    runs-on: ubuntu-latest
    # upload to PyPI for every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        print_hash: true
